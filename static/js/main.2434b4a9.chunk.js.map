{"version":3,"sources":["Cells.js","Rows.js","App.js","serviceWorker.js","index.js"],"names":["getPropString","value","Object","keys","map","key","join","penIcon","className","width","height","viewBox","fill","xmlns","fillRule","d","Cells","user","onValueSave","useState","keyEdit","setKeyEdit","valueEdit","setValueEdit","cancelEdit","valueSave","e","field","target","dataset","val","document","querySelector","id","onInputChange","type","onChange","data-field","onClick","dangerouslySetInnerHTML","__html","Rows","props","users","App","setUsers","setKeys","console","log","axios","method","url","then","response","data","length","el","find","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2434b4a9.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\n\nconst getPropString = (value) => {\n  if (typeof value === \"object\") {\n    return Object.keys(value).map(key => `<strong>${key}:</strong> </br>${getPropString(value[key])}`).join(\"</br>\");\n  } else {\n    return value;\n  }\n}\n\nconst penIcon = <svg className=\"bi bi-pen\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path fillRule=\"evenodd\" d=\"M5.707 13.707a1 1 0 0 1-.39.242l-3 1a1 1 0 0 1-1.266-1.265l1-3a1 1 0 0 1 .242-.391L10.086 2.5a2 2 0 0 1 2.828 0l.586.586a2 2 0 0 1 0 2.828l-7.793 7.793zM3 11l7.793-7.793a1 1 0 0 1 1.414 0l.586.586a1 1 0 0 1 0 1.414L5 13l-3 1 1-3z\" />\n  <path fillRule=\"evenodd\" d=\"M9.854 2.56a.5.5 0 0 0-.708 0L5.854 5.855a.5.5 0 0 1-.708-.708L8.44 1.854a1.5 1.5 0 0 1 2.122 0l.293.292a.5.5 0 0 1-.707.708l-.293-.293z\" />\n  <path d=\"M13.293 1.207a1 1 0 0 1 1.414 0l.03.03a1 1 0 0 1 .03 1.383L13.5 4 12 2.5l1.293-1.293z\" />\n</svg>;\n\n\nfunction Cells({user, keys, onValueSave}) {\n  const [keyEdit, setKeyEdit] = useState('');\n  const [valueEdit, setValueEdit] = useState('');\n\n  const cancelEdit = () => {\n    setKeyEdit('');\n    setValueEdit('');\n  }\n\n  const valueSave = (e) => {\n    const field = e.target.dataset.field;\n    const input = document.querySelector(`#user-field-${user.id}-${field} input`);\n    const val = input.value;\n    onValueSave(user.id, field, val);\n    cancelEdit();\n  } \n\n  const onInputChange = e => {\n    setValueEdit(e.target.value);\n  }\n\n  return (\n    <>\n      {\n        keys.map(key => { \n          return key === keyEdit ?\n            <td id={`user-field-${user.id}-${key}`}>\n              <input type=\"text\" className=\"form-control\" value={valueEdit} onChange={onInputChange} />\n              <button data-field={key} className=\"btn btn-primary btn-sm margin-left mt-1\" onClick={valueSave}>Save</button>\n              <button className=\"btn btn-secondary btn-sm margin-left mt-1\" onClick={cancelEdit}>Cancel</button>\n            </td>\n          : <td>\n              <div dangerouslySetInnerHTML={{ __html: getPropString(user[key]) }} />\n              { key !== 'id' && <span onClick={() => {setKeyEdit(key); setValueEdit(user[key])}}>\n                {penIcon}\n              </span>}\n            </td>\n        })\n      }\n    </>\n  )\n}\n\nexport default Cells;\n","import React from 'react';\nimport Cells from './Cells';\n\nfunction Rows(props) {\n\n\n  return (\n    <>\n      {\n        props.users.map(user => <tr> <Cells user={user} keys={props.keys} onValueSave={props.onValueSave}/></tr>)\n      }\n    </>\n  )\n}\n\nexport default Rows;\n","import React, { useState } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport Rows from './Rows';\nimport '../node_modules/bootstrap/dist/css/bootstrap.css';\n\nfunction App() {\n\n  const [users, setUsers] = useState([]);\n  const [keys, setKeys] = useState([]);\n\n  const onValueSave = (id, key, value) => {\n    const user = users.find(user => user.id === id);\n    user[key] = value;\n    \n    setUsers([...users]);\n  };\n\n  const load = () => {\n    console.log('LOAD')\n    //   fetch('https://jsonplaceholder.typicode.com/users')\n    //     .then(response => response.json())\n    //     .then(json => {\n    //       setUsers(json);\n    //     })\n    // }\n    axios({\n      method: 'get',\n      url: 'https://jsonplaceholder.typicode.com/users',\n    })\n      .then((response) => {\n        setUsers(response.data);\n        setKeys(Object.keys(response.data[0]));\n      })\n  }\n\n\n  return (\n    <div>\n      <button className=\"btn btn-primary\" onClick={load}> Load users</button>\n      {\n        !!keys.length && !!users.length &&\n        <table className=\"border\">\n          <tr className=\"border\">\n            {\n              keys.map(el => <th className=\"border\">{el}</th>)\n            }\n          </tr>\n          <Rows users={users} keys={keys} onValueSave={onValueSave}/>\n        </table>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}